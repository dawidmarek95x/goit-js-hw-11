{"mappings":"qiBAsBIA,EACAC,EACAC,EACAC,E,uCAVEC,EAAK,SAACC,G,OAAaC,SAASC,cAAcF,IAG1CG,EAAaJ,EAAG,gBAChBK,EAAcL,EAAG,uBACjBM,EAAUN,EAAG,YAoBnB,SAASO,KACP,EAAAC,EAAAC,aAAYJ,EAAYK,MAAOd,GAC5Be,MAAK,SAAAC,IAOV,SAAsBC,G,IAACC,EAADD,EAACC,KAAMC,EAAPF,EAAOE,UAC3BjB,EAAciB,EAEd,IAAMC,EAAUF,EAAKG,KAAI,SAAAC,G,IAAEC,EAAYD,EAAZC,aAAcC,EAAaF,EAAbE,cAAeC,EAAIH,EAAJG,KAAMC,EAAKJ,EAALI,MAAOC,EAAKL,EAALK,MAAOC,EAAQN,EAARM,SAAUC,EAASP,EAATO,U,MAAe,uEAEjBC,OAAjDN,EAAc,qCAAyDM,OAAtBP,EAAa,WAIhEO,OAJyEL,EAAK,uKAQ9EK,OAJAJ,EAAM,kIAQNI,OAJAH,EAAM,qIAQNG,OAJAF,EAAS,sIAICE,OAAVD,EAAU,oDAK1CE,KAAK,IAENrB,EAAQsB,mBAAmB,YAAaZ,GAEhB,iBAAbjB,GACTA,EAAS8B,UAGX9B,EAAW,IAAI+B,EAAAC,GAAJ,CAAmB,oBAIN,KAFxBlC,GAAmBiB,EAAKkB,QAGtBF,EAAAG,GAASC,OAAOC,QAAQ,4EACftC,EAAkB,GAAoB,IAAfD,EAChCkC,EAAAG,GAASC,OAAOE,QAAQ,oBAAgCV,OAAZ5B,EAAY,aAC/CD,EAAkB,GAAKA,IAAoBC,GACpDgC,EAAAG,GAASC,OAAOG,KAAK,8DAGvB,GAAIzC,EAAa,EAAG,CAClB,IAAQ0C,EAAuBpC,SAC9BC,cAAc,2BAA2BoC,wBADlCC,OAGRC,OAAOC,SAAS,CACdC,IAAkB,EAAbL,EACLM,SAAU,WAIV9C,IAAgBD,EAClB4C,OAAOI,oBAAoB,SAAUC,EAAmB,CAACC,SAAS,IAElEN,OAAOO,iBAAiB,SAAUF,EAAmB,CAACC,SAAS,IAjE7DE,CAAarC,MAEdsC,OAAM,SAAAC,G,OAASC,QAAQC,IAAIF,MAoEhC,SAASL,IACP,IAAgDQ,EAAApD,SAASqD,gBAAlDC,EAAyCF,EAAzCE,UAAWC,EAA8BH,EAA9BG,aAA8BH,EAAhBI,aAEbF,GAAaC,EAAe,IAO/C7D,GAAc,EACdW,KAhGFH,EAAW4C,iBAAiB,UAG5B,SAAmBW,GACjBA,EAAEC,iBACFhE,EAAa,EACbC,EAAkB,EAClBU,IACAD,EAAQuD,UAAY,M","sources":["src/js/02-infinite-scrolling.js"],"sourcesContent":["// Import of styles\nimport '../sass/02-main.scss';\n\n// Import the function that executes the query to the server for the searched images\nimport { fetchImages } from './fetchImages';\n\n// Import of Notiflix library\nimport Notiflix from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.5.min.css';\n\n// Import of simpleLightbox library\nimport SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\n// Optimizing function (shortening the record) for searching for elements on the page\nconst qs = (selector) => document.querySelector(selector);\n\n// Search for input and output elements\nconst searchForm = qs(\".search-form\");\nconst searchInput = qs(\".search-form__input\");\nconst gallery = qs(\".gallery\");\n\nlet pageNumber;\nlet displayedImages;\nlet totalOfHits;\nlet lightbox;\n\n// Call the new search function after submitting the form\nsearchForm.addEventListener(\"submit\", newSearch);\n\n// Function finding new query results taking into account the value given in the input field\nfunction newSearch(e) {\n  e.preventDefault();\n  pageNumber = 1;\n  displayedImages = 0;\n  searchingImages();\n  gallery.innerHTML = \"\";\n}\n\n// Definition of the image search function contained in the backend\nfunction searchingImages() {\n  fetchImages(searchInput.value, pageNumber)\n    .then(images => {\n      renderImages(images);\n    })\n    .catch(error => console.log(error));\n}\n\n// Definition of the images rendering function based on the data taken from the backend\nfunction renderImages({hits, totalHits}) {\n  totalOfHits = totalHits;\n\n  const markups = hits.map(({webformatURL, largeImageURL, tags, likes, views, comments, downloads}) => `\n  <div class=\"gallery__item\">\n    <a class=\"gallery__link\" href=\"${largeImageURL}\"><img class=\"gallery__img\" src=\"${webformatURL}\" alt=\"${tags}\" loading=\"lazy\" /></a>\n    <div class=\"gallery__info\">\n      <p class=\"info__item\">\n        <b class=\"info__label\">Likes</b>\n        <span class=\"info__data\">${likes}</span>\n      </p>\n      <p class=\"info__item\">\n        <b class=\"info__label\">Views</b>\n        <span class=\"info__data\">${views}</span>\n      </p>\n      <p class=\"info__item\">\n        <b class=\"info__label\">Comments</b>\n        <span class=\"info__data\">${comments}</span>\n      </p>\n      <p class=\"info__item\">\n        <b class=\"info__label\">Downloads</b>\n        <span class=\"info__data\">${downloads}</span>\n      </p>\n    </div>\n  </div>\n  `)\n  .join(\"\");\n\n  gallery.insertAdjacentHTML(\"beforeend\", markups);\n\n  if (typeof lightbox === \"object\") {\n    lightbox.destroy();\n  }\n\n  lightbox = new SimpleLightbox(\".gallery__item a\");\n\n  displayedImages += hits.length;\n\n  if (displayedImages === 0) {\n    Notiflix.Notify.failure(\"Sorry, there are no images matching your search query. Please try again.\");\n  } else if (displayedImages > 0 && pageNumber === 1) {\n    Notiflix.Notify.success(`Hooray! We found ${totalOfHits} images.`);\n  } else if (displayedImages > 0 && displayedImages === totalOfHits) {\n    Notiflix.Notify.info(\"We're sorry, but you've reached the end of search results.\");\n  }\n\n  if (pageNumber > 1) {\n    const { height: cardHeight } = document\n    .querySelector('.gallery .gallery__item').getBoundingClientRect();\n  \n    window.scrollBy({\n      top: cardHeight * 2,\n      behavior: 'smooth',\n    });\n  }\n\n  if (totalOfHits === displayedImages) {\n    window.removeEventListener('scroll', infiniteScrolling, {passive: true});\n  } else {\n    window.addEventListener('scroll', infiniteScrolling, {passive: true});\n  }\n}\n\n// Function definition for infinite scrolling of images while scrolling the page\nfunction infiniteScrolling() {\n  const {scrollTop, scrollHeight, clientHeight} = document.documentElement;\n\n  if (clientHeight + scrollTop >= scrollHeight - 5) {\n    loadMoreImg();\n  }\n}\n\n// Definition of the function for loading more new images\nfunction loadMoreImg() {\n  pageNumber += 1;\n  searchingImages();\n}"],"names":["$fae89a18d2ad1aef$var$pageNumber","$fae89a18d2ad1aef$var$displayedImages","$fae89a18d2ad1aef$var$totalOfHits","$fae89a18d2ad1aef$var$lightbox","$fae89a18d2ad1aef$var$qs","selector","document","querySelector","$fae89a18d2ad1aef$var$searchForm","$fae89a18d2ad1aef$var$searchInput","$fae89a18d2ad1aef$var$gallery","$fae89a18d2ad1aef$var$searchingImages","$iwbpK","fetchImages","value","then","images","param1","hits","totalHits","markups","map","param","webformatURL","largeImageURL","tags","likes","views","comments","downloads","concat","join","insertAdjacentHTML","destroy","$parcel$interopDefault","$5IjG7","length","$iU1Pc","Notify","failure","success","info","cardHeight","getBoundingClientRect","height","window","scrollBy","top","behavior","removeEventListener","$fae89a18d2ad1aef$var$infiniteScrolling","passive","addEventListener","$fae89a18d2ad1aef$var$renderImages","catch","error","console","log","_documentElement","documentElement","scrollTop","scrollHeight","clientHeight","e","preventDefault","innerHTML"],"version":3,"file":"02-infinite-scrolling.831061ec.js.map"}